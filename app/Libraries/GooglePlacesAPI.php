<?php

namespace App\Libraries;

class GooglePlacesAPI
{
    private $apiKey;
    private $baseUrl = 'https://maps.googleapis.com/maps/api/place/';

    public function __construct()
    {
        $this->apiKey = env('GOOGLE_PLACES_API_KEY');
        
        if (empty($this->apiKey)) {
            throw new \Exception('Google Places API key not configured');
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∏–Ω—Å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
     */
    public function searchGeorgianRestaurants($latitude, $longitude, $radius = 5000)
    {
        $url = $this->baseUrl . 'nearbysearch/json';
        
        $params = [
            'location' => $latitude . ',' . $longitude,
            'radius' => $radius,
            'type' => 'restaurant',
            'keyword' => 'georgian food',
            'key' => $this->apiKey
        ];

        return $this->makeRequest($url, $params);
    }

    /**
     * –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≥—Ä—É–∑–∏–Ω—Å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
     */
    public function searchByText($query, $location = null)
    {
        $url = $this->baseUrl . 'textsearch/json';
        
        $params = [
            'query' => $query . ' georgian restaurant',
            'key' => $this->apiKey
        ];

        if ($location) {
            $params['location'] = $location;
            $params['radius'] = 50000; // 50km
        }

        return $this->makeRequest($url, $params);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
     * –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –∏ –º–∞—Å—Å–∏–≤–æ–≤
     */
    public function getPlaceDetails($placeId, $fields = null)
    {
        $url = $this->baseUrl . 'details/json';
        
        // –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä
        if (!$fields) {
            $fields = ['place_id', 'name', 'formatted_address', 'formatted_phone_number', 
                      'website', 'rating', 'opening_hours', 'photos', 'reviews', 'price_level', 'types'];
        }
        
        $params = [
            'place_id' => $placeId,
            'fields' => is_array($fields) ? implode(',', $fields) : $fields,
            'key' => $this->apiKey
        ];

        $response = $this->makeRequest($url, $params);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
        if ($response['success']) {
            return $response['data'];
        } else {
            return [
                'status' => $response['error'] ?? 'ERROR',
                'error_message' => $response['message'] ?? 'Unknown error'
            ];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–µ—Å—Ç–∞
     */
    public function getPlacePhoto($photoReference, $maxWidth = 400)
    {
        $url = $this->baseUrl . 'photo';
        
        $params = [
            'photoreference' => $photoReference,
            'maxwidth' => $maxWidth,
            'key' => $this->apiKey
        ];

        return $url . '?' . http_build_query($params);
    }

    /**
     * –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ photo_reference (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
     */
    public function downloadPhoto($photoReference, $maxWidth = 1200)
    {
        $url = $this->baseUrl . 'photo';
        $params = [
            'photoreference' => $photoReference,
            'maxwidth' => $maxWidth,
            'key' => $this->apiKey
        ];

        $fullUrl = $url . '?' . http_build_query($params);
        log_message('info', "üåê –ó–∞–ø—Ä–æ—Å –∫ Google Photos API: " . substr($fullUrl, 0, 100) . "...");

        try {
            $client = \Config\Services::curlrequest();
            $response = $client->get($url, [
                'query' => $params,
                'timeout' => 30
            ]);

            $responseCode = $response->getStatusCode();
            log_message('info', "üì° HTTP –æ—Ç–≤–µ—Ç: {$responseCode}");

            if ($responseCode !== 200) {
                log_message('error', "‚ùå HTTP –æ—à–∏–±–∫–∞: {$responseCode}");
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            $contentType = $response->getHeader('Content-Type');
            if ($contentType) {
                $contentTypeValue = $contentType->getValue();
                log_message('info', "üìÑ Content-Type: {$contentTypeValue}");
                
                if (strpos($contentTypeValue, 'image/') === 0) {
                    $imageData = $response->getBody();
                    $imageSize = strlen($imageData);
                    $imageSizeMB = round($imageSize / 1024 / 1024, 2);
                    
                    log_message('info', "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {$imageSizeMB} MB ({$imageSize} bytes)");
                    return $imageData;
                } else {
                    log_message('error', "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {$contentTypeValue}");
                    return null;
                }
            } else {
                log_message('warning', "‚ö†Ô∏è Content-Type –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
                return $response->getBody();
            }

        } catch (\Exception $e) {
            log_message('error', "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: " . $e->getMessage());
            return null;
        }
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º
     */
    public function getImageExtension($imageData)
    {
        $header = substr($imageData, 0, 10);
        
        if (strpos($header, "\xFF\xD8\xFF") === 0) {
            return 'jpg';
        } elseif (strpos($header, "\x89PNG") === 0) {
            return 'png';
        } elseif (strpos($header, "GIF") === 0) {
            return 'gif';
        } elseif (strpos($header, "WEBP") !== false) {
            return 'webp';
        }
        
        return 'jpg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
     */
    public function savePhoto($imageData, $filename)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        $uploadPath = FCPATH  . '../uploads/restaurants/';
        
        log_message('info', "üìÅ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å WRITEPATH: " . FCPATH);
        log_message('info', "üìÅ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {$uploadPath}");
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        if (!is_dir($uploadPath)) {
            log_message('info', "üìÇ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫: {$uploadPath}");
            if (mkdir($uploadPath, 0755, true)) {
                log_message('info', "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            } else {
                log_message('error', "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫");
                return null;
            }
        } else {
            log_message('info', "‚úÖ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏
        if (!is_writable($uploadPath)) {
            log_message('error', "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {$uploadPath}");
            log_message('info', "üîß –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...");
            
            if (chmod($uploadPath, 0755)) {
                log_message('info', "‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ 0755");
            } else {
                log_message('error', "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞");
                return null;
            }
        } else {
            log_message('info', "‚úÖ –ü–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏");
        }

        $fullPath = $uploadPath . $filename;
        log_message('info', "üíæ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞: {$fullPath}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
        $freeSpace = disk_free_space($uploadPath);
        if ($freeSpace !== false) {
            $freeMB = round($freeSpace / 1024 / 1024, 2);
            $imageSize = strlen($imageData);
            $imageMB = round($imageSize / 1024 / 1024, 2);
            
            log_message('info', "üíΩ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {$freeMB} MB, —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {$imageMB} MB");
            
            if ($freeSpace < $imageSize * 2) {
                log_message('error', "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ");
                return null;
            }
        } else {
            log_message('warning', "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (file_exists($fullPath)) {
            log_message('warning', "‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º: {$filename}");
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        log_message('info', "üíæ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —Ä–∞–∑–º–µ—Ä–æ–º " . strlen($imageData) . " bytes...");
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        $tempPath = $uploadPath . 'test_write_' . time() . '.tmp';
        $testData = 'test';
        
        if (file_put_contents($tempPath, $testData) !== false) {
            log_message('info', "‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–µ–Ω");
            unlink($tempPath); // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        } else {
            log_message('error', "‚ùå –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –Ω–µ —É–¥–∞–ª—Å—è");
            return null;
        }
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        $bytesWritten = file_put_contents($fullPath, $imageData, LOCK_EX);
        
        if ($bytesWritten !== false) {
            $fileSizeMB = round($bytesWritten / 1024 / 1024, 2);
            log_message('info', "‚úÖ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ: {$filename} ({$fileSizeMB} MB, {$bytesWritten} bytes)");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if (file_exists($fullPath)) {
                $actualSize = filesize($fullPath);
                log_message('info', "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: —Ä–∞–∑–º–µ—Ä –Ω–∞ –¥–∏—Å–∫–µ {$actualSize} bytes");
                
                if ($actualSize === $bytesWritten && $actualSize === strlen($imageData)) {
                    log_message('info', "‚úÖ –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç - —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è
                    $testRead = file_get_contents($fullPath, false, null, 0, 100);
                    if ($testRead !== false) {
                        log_message('info', "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —á–∏—Ç–∞–µ—Ç—Å—è");
                    } else {
                        log_message('warning', "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —á—Ç–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞");
                    }
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    $relativePath = 'uploads/restaurants/' . $filename;
                    log_message('info', "üìÅ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ë–î: {$relativePath}");
                    return $relativePath;
                } else {
                    log_message('error', "‚ùå –†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –û–∂–∏–¥–∞–ª–∏: " . strlen($imageData) . ", –∑–∞–ø–∏—Å–∞–Ω–æ: {$bytesWritten}, –Ω–∞ –¥–∏—Å–∫–µ: {$actualSize}");
                    return null;
                }
            } else {
                log_message('error', "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏!");
                return null;
            }
        } else {
            $error = error_get_last();
            log_message('error', "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {$filename}");
            if ($error) {
                log_message('error', "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: " . $error['message']);
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            log_message('error', "üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:");
            log_message('error', "   - –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " . (is_dir($uploadPath) ? '–¥–∞' : '–Ω–µ—Ç'));
            log_message('error', "   - –ü–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: " . (is_writable($uploadPath) ? '–¥–∞' : '–Ω–µ—Ç'));
            log_message('error', "   - –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: " . strlen($imageData) . " bytes");
            log_message('error', "   - –ò–º—è —Ñ–∞–π–ª–∞: {$filename}");
            log_message('error', "   - –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {$fullPath}");
            
            return null;
        }
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
     */
    public function diagnoseFileSystem()
    {
        $info = [
            'php_version' => phpversion(),
            'current_dir' => getcwd(),
            'document_root' => $_SERVER['DOCUMENT_ROOT'] ?? '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'writepath_defined' => defined('WRITEPATH'),
            'writepath_value' => defined('WRITEPATH') ? WRITEPATH : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
            'rootpath_defined' => defined('ROOTPATH'),
            'rootpath_value' => defined('ROOTPATH') ? ROOTPATH : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
            'file_functions' => [
                'file_put_contents' => function_exists('file_put_contents'),
                'mkdir' => function_exists('mkdir'),
                'chmod' => function_exists('chmod'),
                'is_writable' => function_exists('is_writable'),
                'disk_free_space' => function_exists('disk_free_space')
            ]
        ];

        foreach ($info as $key => $value) {
            if (is_array($value)) {
                foreach ($value as $subKey => $subValue) {
                    log_message('info', "üîç {$key}.{$subKey}: " . ($subValue ? '–¥–∞' : '–Ω–µ—Ç'));
                }
            } else {
                log_message('info', "üîç {$key}: {$value}");
            }
        }

        return $info;
    }
    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ Place ID –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
     */
    public function findPlaceId($restaurantName, $cityName, $state = null)
    {
        $query = $restaurantName . ' restaurant ' . $cityName;
        if ($state) {
            $query .= ' ' . $state;
        }

        $url = $this->baseUrl . 'textsearch/json';
        $params = [
            'query' => $query,
            'type' => 'restaurant',
            'key' => $this->apiKey
        ];

        $response = $this->makeRequest($url, $params);

        if ($response['success'] && !empty($response['data']['results'])) {
            return $response['data']['results'][0]['place_id'];
        }

        return null;
    }

    /**
     * –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
     */
    public function autocomplete($input, $location = null)
    {
        $url = $this->baseUrl . 'autocomplete/json';
        
        $params = [
            'input' => $input,
            'types' => 'establishment',
            'key' => $this->apiKey
        ];

        if ($location) {
            $params['location'] = $location;
            $params['radius'] = 50000;
        }

        return $this->makeRequest($url, $params);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     * –û–ë–ù–û–í–õ–ï–ù–û —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    private function makeRequest($url, $params)
    {
        $fullUrl = $url . '?' . http_build_query($params);
        
        $client = \Config\Services::curlrequest();
        
        try {
            $response = $client->get($fullUrl, [
                'timeout' => 30,
                'headers' => [
                    'User-Agent' => 'GeorgianFoodNearMe/1.0'
                ]
            ]);

            $body = $response->getBody();
            $data = json_decode($body, true);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ status
            if (!isset($data['status'])) {
                return [
                    'success' => false,
                    'error' => 'INVALID_RESPONSE',
                    'message' => 'Invalid API response format'
                ];
            }

            if ($data['status'] === 'OK') {
                return [
                    'success' => true,
                    'data' => $data
                ];
            } else {
                return [
                    'success' => false,
                    'error' => $data['status'],
                    'message' => $data['error_message'] ?? 'Unknown error'
                ];
            }

        } catch (\Exception $e) {
            log_message('error', 'Google Places API request failed: ' . $e->getMessage());
            return [
                'success' => false,
                'error' => 'REQUEST_FAILED',
                'message' => $e->getMessage()
            ];
        }
    }

    /**
     * –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    public function geocodeAddress($address)
    {
        $url = 'https://maps.googleapis.com/maps/api/geocode/json';
        
        $params = [
            'address' => $address,
            'key' => $this->apiKey
        ];

        return $this->makeRequest($url, $params);
    }

    /**
     * –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–¥—Ä–µ—Å)
     */
    public function reverseGeocode($latitude, $longitude)
    {
        $url = 'https://maps.googleapis.com/maps/api/geocode/json';
        
        $params = [
            'latlng' => $latitude . ',' . $longitude,
            'key' => $this->apiKey
        ];

        return $this->makeRequest($url, $params);
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API
     */
    public function testConnection()
    {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º Place ID
        $testPlaceId = 'ChIJ7TQBkY_RD4gRQ286GefKeMk';
        
        $result = $this->getPlaceDetails($testPlaceId, ['place_id', 'name']);
        
        return [
            'success' => isset($result['status']) && $result['status'] === 'OK',
            'status' => $result['status'] ?? 'UNKNOWN',
            'message' => $result['error_message'] ?? 'Connection test completed'
        ];
    }
}